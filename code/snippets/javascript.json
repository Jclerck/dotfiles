{
  /*
	// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "Debugger": {
    "prefix": "dbg",
    "body": "debugger; // eslint-disable-line",
    "description": "Insert debug breakpoint"
  },
  "Custom Element": {
    "prefix": "ce",
    "body": [
      "class $1 extends HTMLElement {",
      "\tstatic get observedAttributes() {",
      "\t\treturn [$2];",
      "\t}\n",
      "\tget $3() {",
      "\t\treturn this.$3;",
      "\t}\n",
      "\tset $3(val) {",
      "\t\tthis.$3 = val;",
      "\t}\n",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}\n",
      "\tattributeChangedCallback(name, oldValue, newValue) {",
      "\t\t$4",
      "\t}",
      "}\n",
      "customElements.define('$5', $1);"
    ],
    "description": "Insert Custom Element class structure and definition"
  },
  "Jest Snapshot Test": {
    "prefix": "jst",
    "body": [
      "import { $2 } from '$1';",
      "import React from 'react';",
      "import { shallow } from 'enzyme';",
      "\n",
      "describe('$3 snapshot', () => {",
      "\n",
      "\tit('should render correctly$4', () => {",
      "\t\tconst props = {$5};",
      "\n",
      "\t\tconst tree = shallow(<$6 {...props} />);",
      "\n",
      "\t\texpect(tree).toMatchSnapshot();",
      "\t});",
      "});"
    ],
    "description": "Insert Jest Snapshot test"
  }
}
